@using Consolidated_App.Models.FramworkModels
@using Consolidated_App.WebConstants
@using Cnetv7BufferHolder
@using CNET_V7_Domain.Domain.SecuritySchema
@inject Consolidated_App.Common.AuthNavigation.NavigatorManager navigationManager
@inject Consolidated_App.WebConstants.SharedHelpers sharedHelpers
@inject Consolidated_App.AuthNavigation.AuthenticationManager authenticationManager

@{
    var authedUser = await authenticationManager.GetAuthenticatedUser();
    GlobalParamsModel unorderedNavList = await sharedHelpers.GetGlobalParams(authedUser);
    var userRole = await sharedHelpers.GetUserRoleM(authedUser?.Id ?? 0);
    var rootNode = await navigationManager.PrepareNavigationList(unorderedNavList?.navigatorList);
    var _r = userRole?.Role ?? 0;
    var _r1 = authedUser?.Id ?? 0;

    var roleFunctions = GeneralBufferHolder.FunctionWithAccessMatrix
        .Where(u => u.VisuaCompDesc == "Heineken System Management Access"
                 && u.Role.HasValue
                 && u.Role.Value == _r)
        .ToList();
    bool hasMassUpdate = roleFunctions.Any(f => f.Description == "Mass Update" && f.Access == true);
    bool hasOutletTransfer = roleFunctions.Any(f => f.Description == "Outlet Transfer" && f.Access == true);
    bool hasPriceManagement = roleFunctions.Any(f => f.Description == "Price Management" && f.Access == true);
    var reportAccess = await GetReportsWithAccess(_r1);

    bool hasConsolidatedReport = reportAccess?.Any(f => f.DefaultName == "Consolidated Report" && f.Access == true) ?? false;
    bool hasActivityReport = reportAccess?.Any(f => f.DefaultName == "Activity Report" && f.Access == true) ?? false;
    bool hasStockConsolidationReport = reportAccess?.Any(f => f.DefaultName == "Stock Consolidation Report" && f.Access == true) ?? false;
    bool hasCommerceReport = reportAccess?.Any(f => f.DefaultName == "Heineken E-Commerce Report" && f.Access == true) ?? false;
    bool hasOrderManagementReport = reportAccess?.Any(f => f.DefaultName == "Order Management Report" && f.Access == true) ?? false;

    async Task<List<ReportAccessDTO>> GetReportsWithAccess(int userId)
    {
        var userRole = await sharedHelpers.GetUserRoleM(userId);
        if (userRole == null || userRole.Role <= 0)
            return new List<ReportAccessDTO>();

        var xReports = await sharedHelpers.GetReportsBySubSystem();
        if (xReports == null || !xReports.Any())
            return new List<ReportAccessDTO>();

        var xAccess = await sharedHelpers.GetAccessM(userRole.Role);
        if (xAccess == null || !xAccess.Any())
            return new List<ReportAccessDTO>();
        var reportsWithAccess = xReports
            .Where(report => xAccess.Any(access => access.Reference == report.Id.ToString()))
            .Select(report => new ReportAccessDTO
                    {
                        DefaultName = report.DefaultName,
                        Access = true
                    })
            .ToList();

        return reportsWithAccess;
    }
}

<ul class="sidebar-menu" data-widget="tree">
    <li class="active">
        <a href="@Url.Action("Index","Home")">
            <i class="fa fa-dashboard"></i> <span>Dashboard</span>
        </a>
    </li>

    <li class="treeview">
        <a href="#">
            <i class="fa fa-cloud"></i> <span>Consolidated Reports</span>
            <span class="pull-right-container">
                <i class="fa fa-angle-left pull-right"></i>
            </span>
        </a>
        <ul class="treeview-menu">
            <li>
                @if (hasConsolidatedReport){
                    <a href="@Url.Action("Index","ConsolidatedReport")">
                        <i class="fa fa-dot-circle-o"></i> Sales Report
                    </a>
                }
            
            </li>
            <li>
                @if (hasActivityReport){
                    <a href="@Url.Action("Index","ActivityReport")">
                        <i class="fa fa-dot-circle-o"></i> Activity Report
                    </a>

                }
            </li>
            <li>
                @if (hasStockConsolidationReport){
                    <a href="@Url.Action("Index","StockConsolidationReport")">
                        <i class="fa fa-dot-circle-o"></i> Consolidated Stock Report
                    </a>
                }
               
            </li>
            <li>
                @if (hasCommerceReport){
                    <a href="@Url.Action("Index","EcommerceReport")">
                        <i class="fa fa-dot-circle-o"></i> E-Commerce Integrated Report
                    </a>
                }
               
            </li>
            <li>
                @if (hasOrderManagementReport){
                    <a href="@Url.Action("Index","OrderManagement")">
                        <i class="fa fa-dot-circle-o"></i> Order Management Report
                    </a>
                }
             
            </li>

            @if (hasMassUpdate)
            {
                <li>
                    <a href="@Url.Action("Index","MassUpdate")">
                        <i class="fa fa-dot-circle-o"></i> Mass Update
                    </a>
                </li>
            }
            @if (hasOutletTransfer)
            {
                <li>
                    <a href="@Url.Action("Index","OutleteTransfer")">
                        <i class="fa fa-dot-circle-o"></i> Transfer Outlet
                    </a>
                </li>
            }
            @if (hasPriceManagement)
            {
                <li>
                    <a href="@Url.Action("Index","PriceUpdate")">
                        <i class="fa fa-dot-circle-o"></i> Price Update
                    </a>
                </li>
            }
        </ul>
    </li>
</ul>
