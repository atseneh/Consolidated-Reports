@model MenuItem
@using Consolidated_App.Models.FramworkModels
@{

    var hasChildNodes = Model.ChildNodes != null && Model.ChildNodes.Any();
    var liCssClass = "";
    if (hasChildNodes)
    {
        liCssClass = "treeview";
    }

    @functions
    {
        string GetUrl(MenuItem dataUrl)
        {
            if (dataUrl.ChildNodes?.Count > 0)
            {
                return "#";
            }
            else
            {
                return !string.IsNullOrEmpty(dataUrl?.ActionName) && !string.IsNullOrEmpty(dataUrl.ControllerName)
                            ? Url.Action(dataUrl.ActionName, dataUrl.ControllerName, dataUrl.RouteValues)
                            : !string.IsNullOrEmpty(dataUrl.Url)
                            ? $"{(dataUrl.Url.StartsWith("~/", StringComparison.Ordinal) ? Url.Content(dataUrl.Url) : dataUrl.Url).TrimEnd('/')}"
                            : string.Empty;
            }
        }
    }

    <li @(!String.IsNullOrEmpty(liCssClass) ? Html.Raw("class=\"" + liCssClass + "\"") : null)>
        <a href="@GetUrl(Model)">
            @if (!string.IsNullOrEmpty(Model.IconClass))
            {
                <text>
                    <i class="fa @Url.Content(Model.IconClass)"></i>
                </text>
            }
            <span>@Model.Title</span>
            @if (hasChildNodes)
            {
                <i class="fa fa-angle-left pull-right"></i>
            }
        </a>
        @if (hasChildNodes)
        {
            <ul class="treeview-menu">
                @foreach (var childItem in Model.ChildNodes)
                {
                    @await Html.PartialAsync("_MenuItem", childItem)

                }


            </ul>
        }
    </li>

}
